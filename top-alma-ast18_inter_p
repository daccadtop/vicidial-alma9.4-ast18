#!/bin/sh

echo "TOP DIALER installation AlmaLinux/Ast18/ Interactive Mode"

# Function to ask a yes/no question
ask_yes_no() {
    local prompt="$1"
    local default="$2"
    local response

    read -p "$prompt (y/n) [default: $default]: " response
    # Set response to default if the user presses enter without any input
    response=${response:-$default}

    # Convert response to lowercase to handle both 'y' and 'Y'
    response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

    # Interpret any input other than 'y' as 'n'
    if [[ "$response" == "y" ]]; then
        echo "y"
    else
        echo "n"
    fi
}

# Function to ask for general input
ask_input() {
    local prompt="$1"
    local default="$2"
    read -p "$prompt [default: $default]: " response
    response=${response:-$default}
    echo "$response"
}

# Question 1
CONTINUE_INSTALL=$(ask_yes_no "Are you ready for the installation?" "y")
if [[ "$CONTINUE_INSTALL" == "n" ]]; then
    echo "Installation aborted."
    exit 0
fi

# Question 2
CLUSTER_INSTALL=$(ask_yes_no "Is this a cluster installation?" "y")
if [[ "$CLUSTER_INSTALL" == "n" ]]; then
    SS_INSTALL="y"
    echo "Single server installation script coming soon."
fi

# Internal IP address
LOCAL_IP=$(hostname -I | awk '{print $1}')
EXTERNAL_IP=$(curl -s checkip.amazonaws.com)
echo "The Internal IP address found was $LOCAL_IP."
USE_IP=$(ask_yes_no "Do you want to use this IP address for this server?" "y")
if [[ $USE_IP == "n" || $USE_IP == "N" ]]; then
    read -p "Please enter the IP address for this server: " LOCAL_IP
fi

# Question 3
USE_DATABASE=$(ask_yes_no "Will this server be used as the Database?" "y")
if [[ "$USE_DATABASE" == "y" ]]; then
    db_username=$(ask_input "DB Username" "cron")
    db_password=$(ask_input "DB Password" "1234")
    db_name=$(ask_input "DB Name" "asterisk")
    db_custom_username=$(ask_input "DB Custom Username" "custom")
    db_custom_password=$(ask_input "DB Custom Password" "custom1234")
    db_port=$(ask_input "DB Port" "3306")
    db_slave_user=$(ask_input "DB Slave User" "slave")
    db_slave_pass=$(ask_input "DB Slave Pass" "slave1234")
else
    db_server_ip=$(ask_input "DB Server IP" "$LOCAL_IP")
    db_username=$(ask_input "DB Username" "cron")
    db_password=$(ask_input "DB Password" "1234")
    db_name=$(ask_input "DB Name" "asterisk")
    db_custom_username=$(ask_input "DB Custom Username" "custom")
    db_custom_password=$(ask_input "DB Custom Password" "custom1234")
    db_port=$(ask_input "DB Port" "3306")
    db_slave_user=$(ask_input "DB Slave User" "slave")
    db_slave_pass=$(ask_input "DB Slave Pass" "slave1234")
fi

# Question 4
USE_WEB=$(ask_yes_no "Will this server be used as a Web server?" "y")

# Question 5
USE_TELEPHONY=$(ask_yes_no "Will this server be used as a Telephony server?" "y")
if [[ $USE_TELEPHONY == "y" ]]; then
        FIRST_TELEPHONY=$(ask_yes_no "Is this your Telephony server?" "y")
fi

# Question 6
USE_ARCHIVE=$(ask_yes_no "Will this server be used as an Archive server?" "y")

# Question 7
USE_TDGUI=$(ask_yes_no "Will this server use the TOP DIALER GUI?" "n")

if [[ $USE_TELEPHONY == "y" || $USE_WEB == "y" ]]; then
        domain_name=$(ask_input "Please set your Domain Name" "xxxx.xxxxxx.xxx")
        admin_email=$(ask_input "Domain Admin Email Address" "certs@topit.solutions")
fi

SERVER_ID=$(ask_input "Please set an ID for your server:(No space or special char)" "topd")

SERVER_DESC=$(ask_input "Please set a Description for your server" "top test")

# Print summary
echo -e "\nInstallation Summary:"
echo "Cluster installation: $CLUSTER_INSTALL"
echo "Server IP: $LOCAL_IP"
echo "External Server IP: $EXTERNAL_IP"
echo "Used as Database: $USE_DATABASE"
if [[ "$USE_DATABASE" == "y" ]]; then
    echo "DB Username: $db_username"
    echo "DB Password: $db_password"
    echo "DB Name: $db_name"
    echo "DB Custom Username: $db_custom_username"
    echo "DB Custom Password: $db_custom_password"
    echo "DB Port: $db_port"
    echo "DB Slave User: $db_slave_user"
    echo "DB Slave Pass: $db_slave_pass"
else
    echo "DB Server IP: $db_server_ip"
    echo "DB Username: $db_username"
    echo "DB Password: $db_password"
    echo "DB Custom Username: $db_custom_username"
    echo "DB Custom Password: $db_custom_password"
    echo "DB Port: $db_port"
    echo "DB Slave User: $db_slave_user"
    echo "DB Slave Pass: $db_slave_pass"
fi
echo "Used as Web server: $USE_WEB"
echo "Used as Telephony server: $USE_TELEPHONY"
echo "First Telephony server: $FIRST_TELEPHONY"
echo "Used as Archive server: $USE_ARCHIVE"
echo "Used as TOP DIALER GUI: $USE_TDGUI"
echo "Your Server ID: $SERVER_ID"
echo "Your Server Description: $SERVER_DESC"

# Ask if the user wants to continue
CONTINUE_INSTALL_FINAL=$(ask_yes_no "Do you want to continue with the installation?" "y")
if [[ "$CONTINUE_INSTALL_FINAL" == "y" ]]; then
    echo "Installation started, sit tight."
sleep 5

export LC_ALL=C

yum groupinstall "Development Tools" -y

yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
yum -y install yum-utils
dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y
dnf install https://rpms.remirepo.net/enterprise/remi-release-9.rpm -y
dnf module enable php:remi-7.4 -y
dnf module enable mariadb:10.5 -y

dnf -y install dnf-plugins-core

yum install -y php screen php-mcrypt subversion php-cli php-gd php-curl php-mysql php-ldap php-zip php-fileinfo php-opcache -y 
yum in -y wget unzip make patch gcc gcc-c++ subversion php php-devel php-gd gd-devel readline-devel php-mbstring php-mcrypt 
yum in -y php-imap php-ldap php-mysqli php-odbc php-pear php-xml php-xmlrpc curl curl-devel perl-libwww-perl ImageMagick 
sleep 3
yum in -y newt-devel libxml2-devel kernel-devel sqlite-devel libuuid-devel sox sendmail lame-devel htop iftop perl-File-Which
yum in -y php-opcache libss7 mariadb-devel libss7* libopen*
yum in -y initscripts
yum copr enable irontec/sngrep -y
dnf install sngrep -y


dnf --enablerepo=crb install libsrtp-devel -y
dnf config-manager --set-enabled crb
yum install libsrtp-devel -y

tee -a /etc/httpd/conf/httpd.conf <<EOF

CustomLog /dev/null common

Alias /RECORDINGS/MP3 "/var/spool/asterisk/monitorDONE/MP3/"

<Directory "/var/spool/asterisk/monitorDONE/MP3/">
    Options Indexes MultiViews
    AllowOverride None
    Require all granted
</Directory>
EOF

sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

tee -a /etc/php.ini <<EOF

error_reporting  =  E_ALL & ~E_NOTICE
memory_limit = 448M
short_open_tag = On
max_execution_time = 3330
max_input_time = 3360
post_max_size = 448M
upload_max_filesize = 442M
default_socket_timeout = 3360
date.timezone = America/New_York
EOF

systemctl restart httpd

yum in -y sqlite-devel httpd mod_ssl nano chkconfig htop atop mytop iftop
yum in -y libedit-devel uuid* libxml2* speex-devel speex* postfix dovecot s-nail roundcubemail inxi
dnf install -y mariadb-server mariadb

dnf -y install dnf-plugins-core
dnf config-manager --set-enabled powertools

systemctl enable mariadb

cp /etc/my.cnf /etc/my.cnf.original
echo "" > /etc/my.cnf
cd /usr/src/topdialer
#wget https://topt.topdialer.solutions:8080/autoinstall/mysqlconf.tar.gz
wget http://10.7.78.25/autoinstall/mysqlconf.tar.gz
tar -xzf mysqlconf.tar.gz
cat my.cnf > /etc/my.cnf

mkdir /var/log/mysqld
touch /var/log/mysqld/slow-queries.log
chown -R mysql:mysql /var/log/mysqld
systemctl restart mariadb

systemctl enable httpd.service
systemctl enable mariadb.service
systemctl restart httpd.service
systemctl restart mariadb.service

#Install Perl Modules
echo "Install Perl"
yum install -y perl-CPAN perl-YAML perl-CPAN-DistnameInfo perl-libwww-perl perl-DBI perl-DBD-MySQL perl-GD perl-Env perl-Term-ReadLine-Gnu perl-SelfLoader perl-open.noarch

#CPM install
cd /usr/src/topdialer
curl -fsSL https://raw.githubusercontent.com/skaji/cpm/main/cpm | perl - install -g App::cpm
/usr/local/bin/cpm install -g

#Install Asterisk Perl
cd /usr/src
wget http://download.vicidial.com/required-apps/asterisk-perl-0.08.tar.gz
tar xzf asterisk-perl-0.08.tar.gz
cd asterisk-perl-0.08
perl Makefile.PL
make all
make install 

yum install libsrtp-devel -y
yum install -y elfutils-libelf-devel libedit-devel

#Install Lame
cd /usr/src
wget http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar -zxf lame-3.99.5.tar.gz
cd lame-3.99.5
./configure
make
make install

#Install Jansson
cd /usr/src/
wget https://digip.org/jansson/releases/jansson-2.13.tar.gz
tar xvzf jansson*
cd jansson-2.13
./configure
make clean
make
make install 
ldconfig

#Install Dahdi
echo "Install Dahdi"
ln -sf /usr/lib/modules/$(uname -r)/vmlinux.xz /boot/
mkdir /etc/include
cp /usr/src/topdialer/newt.h /etc/include/

cd /usr/src/
mkdir dahdi-linux-complete-3.4.0+3.4.0
cd dahdi-linux-complete-3.4.0+3.4.0
wget http://10.7.78.25/autoinstall/dahdi-alma9-4.tar.gz
tar -xzf dahdi-alma9-4.tar.gz
yum in newt* -y

make clean
make
make install
make install-config

yum -y install dahdi-tools-libs

cd tools
make clean
make
make install
make install-config

cp /etc/dahdi/system.conf.sample /etc/dahdi/system.conf
modprobe dahdi
modprobe dahdi_dummy
/usr/sbin/dahdi_cfg -vvvvvvvvvvvvv

systemctl enable dahdi
service dahdi start
service dahdi status

read -p 'Press Enter to continue: '

echo 'Continuing...'

#Install Asterisk and LibPRI
mkdir /usr/src/asterisk
cd /usr/src/asterisk
wget https://downloads.asterisk.org/pub/telephony/libpri/libpri-1.6.1.tar.gz
wget https://downloads.asterisk.org/pub/telephony/asterisk/old-releases/asterisk-18.18.1.tar.gz
tar -xvzf asterisk-*
tar -xvzf libpri-*

cd /usr/src
wget https://github.com/cisco/libsrtp/archive/v2.1.0.tar.gz
tar xfv v2.1.0.tar.gz
cd libsrtp-2.1.0
./configure --prefix=/usr --enable-openssl
make shared_library && sudo make install
ldconfig

cd /usr/src/asterisk/asterisk-18.18.1/
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/amd_stats-18.patch
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/iax_peer_status-18.patch
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/sip_peer_status-18.patch
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/timeout_reset_dial_app-18.patch
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/timeout_reset_dial_core-18.patch
cd apps/
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/enter.h
wget http://download.vicidial.com/asterisk-patches/Asterisk-18/leave.h
yes | cp -rf enter.h.1 enter.h
yes | cp -rf leave.h.1 leave.h

cd /usr/src/asterisk/asterisk-18.18.1/
patch < amd_stats-18.patch apps/app_amd.c
patch < iax_peer_status-18.patch channels/chan_iax2.c
patch < sip_peer_status-18.patch channels/chan_sip.c
patch < timeout_reset_dial_app-18.patch apps/app_dial.c
patch < timeout_reset_dial_core-18.patch main/dial.c

yum in libuuid-devel libxml2-devel -y

: ${JOBS:=$(( $(nproc) + $(nproc) / 2 ))}
./configure --libdir=/usr/lib64 --with-gsm=internal --enable-opus --enable-srtp --with-ssl --enable-asteriskssl --with-pjproject-bundled --with-jansson-bundled

make menuselect/menuselect menuselect-tree menuselect.makeopts
#enable app_meetme
menuselect/menuselect --enable app_meetme menuselect.makeopts
#enable res_http_websocket
menuselect/menuselect --enable res_http_websocket menuselect.makeopts
#enable res_srtp
menuselect/menuselect --enable res_srtp menuselect.makeopts
make samples
sed -i 's|noload = chan_sip.so|;noload = chan_sip.so|g' /etc/asterisk/modules.conf
make -j ${JOBS} all
make install


read -p 'Press Enter to continue: '

echo 'Continuing...'

#Install astguiclient
echo "Installing astguiclient"
mkdir /usr/src/astguiclient
cd /usr/src/astguiclient
svn checkout svn://svn.eflo.net/agc_2-X/trunk
cd /usr/src/astguiclient/trunk













































